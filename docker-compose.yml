version: '3.9'

networks:
  medical-center-network:
    name: medical-center-network

services:
  mariadb-2:
    image: mariadb
    container_name: mariadb-2
    restart: always
    environment:
      MARIADB_ROOT_PASSWORD: $MARIADB_ROOT_PASSWORD
      MARIADB_DATABASE: $MARIADB_DATABASE
      MYSQL_TCP_PORT: 3307
      MYSQL_UNIX_PORT: 3307
    ports:
      - "3307:3307"
    networks:
      - medical-center-network

  phpmyadmin-2:
    image: bitnami/phpmyadmin:latest
    container_name: phpmyadmin-2
    restart: always
    ports:
      - "8084:8082"
    environment:
      - DATABASE_PORT_NUMBER=3307
      - APACHE_HTTP_PORT_NUMBER=8082
    depends_on:
      - mariadb-2
    networks:
      - medical-center-network

  redis-2:
    image: bitnami/redis:latest
    container_name: redis-2
    restart: always
    environment:
      REDIS_PASSWORD: $REDIS_PASSWORD
      REDIS_PORT_NUMBER: 6380
    ports:
      - "6380:6380"
    networks:
      - medical-center-network

  redisinsight-2:
    restart: always
    container_name: redisinsight-2
    image: redis/redisinsight:latest
    environment:
      RI_APP_PORT: 5541
    ports:
      - "5541:5541"
    depends_on:
      - redis-2
    networks:
      - medical-center-network

  vmagent:
    container_name: vmagent
    image: victoriametrics/vmagent:v1.114.0
    depends_on:
      - "victoriametrics"
    ports:
      - 8429:8429
    volumes:
      - vmagentdata:/vmagentdata
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--promscrape.config=/etc/prometheus/prometheus.yml"
      - "--remoteWrite.url=http://victoriametrics:8428/api/v1/write"
    networks:
      - medical-center-network
    restart: always

  victoriametrics:
    container_name: victoriametrics
    image: victoriametrics/victoria-metrics:v1.114.0
    ports:
      - 8428:8428
      - 8089:8089
      - 8089:8089/udp
      - 2003:2003
      - 2003:2003/udp
      - 4242:4242
    volumes:
      - vmdata:/storage
    command:
      - "--storageDataPath=/storage"
      - "--graphiteListenAddr=:2003"
      - "--opentsdbListenAddr=:4242"
      - "--httpListenAddr=:8428"
      - "--influxListenAddr=:8089"
    networks:
      - medical-center-network
    restart: always

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    networks:
      - medical-center-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      - "victoriametrics"
    volumes:
      - grafanadata:/var/lib/grafana
      - ./config/grafana/provisioning/datasources/prometheus.yml:/etc/grafana/provisioning/datasources/prometheus.yml
      - ./config/grafana/provisioning/datasources/loki.yml:/etc/grafana/provisioning/datasources/loki.yml
      - ./config/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - '3200:3200'
    environment:
      GF_SERVER_HTTP_PORT: 3200
      GF_SECURITY_ADMIN_USER: $GF_SECURITY_ADMIN_USER
      GF_SECURITY_ADMIN_PASSWORD: $GF_SECURITY_ADMIN_PASSWORD
    networks:
      - medical-center-network
    restart: always

  medical-center-api:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medical-center-api
    volumes:
      - /tmp
    environment:
      SPRING_DATASOURCE_URL: $SPRING_DATASOURCE_URL
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: $MARIADB_ROOT_PASSWORD
      SPRING_DATA_REDIS_HOST: $REDIS_HOST
      SPRING_DATA_REDIS_PASSWORD: $REDIS_PASSWORD
      SECURITY_JWT_SECRET: $JWT_SECRET
      SECURITY_JWT_ACCESS-TOKEN_EXPIRATION: $JWT_ACCESS_TOKEN_EXPIRATION
      SECURITY_JWT_REFRESH-TOKEN_EXPIRATION: $JWT_REFRESH_TOKEN_EXPIRATION
      CORS_ALLOWED-ORIGINS: $CORS_ALLOWED_ORIGINS
      LOKI: $LOKI
    ports:
      - "8080:8080"
    depends_on:
      - mariadb-2
      - phpmyadmin-2
      - redis-2
      - redisinsight-2
    networks:
      - medical-center-network

volumes:
  vmagentdata: {}
  vmdata: {}
  grafanadata: {}